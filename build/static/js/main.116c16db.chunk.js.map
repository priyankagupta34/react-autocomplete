{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","onKeyDownToFocusViaSuggestion","e","next","mainOptionBody","document","getElementById","undefined","length","getElementsByTagName","which","setState","state","index","nextSibling","classList","remove","add","scrollIntoView","behavior","block","inline","checkvalue","dataset","value","suggestion","clickSomewhere","path","id","className","trim","selectedArray","onfocusDataShouldDisplay","includes","words","JSON","parse","window","localStorage","getItem","reverse","selectedType","filter","toLowerCase","showingsearchvalue","openOptionArea","target","type","name","typelist","split","substr","indexOf","fetch","then","json","response","forEach","element","charAt","push","catch","err","console","log","btnSearchClick","shift","setItem","stringify","removeSuggestion","data","splice","clickOption","nativeEvent","addEventListener","this","bind","removeEventListener","src","logo","alt","style","display","justifyContent","marginTop","onChange","onFocus","onClick","map","sug","key","data-value","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.116c16db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react'\n\n/* This is a dummy search input box which supports auto complete feature\n  1. it saves search history in local but only upto 5 for all intents and purposes, as we don't want search list to increase too much.\n  2. light css has been provided following theme to be 'torquiose', which can be modify as required.\n  3. facility to remove search data is also implemented for those who would want to remove particulars.\n  4. this reacts well with key up and down events and also featuring that on 'enter' it selects that option. \n   */\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      checkvalue: '',\n      suggestion: [],\n      selectedArray: [],\n      showingsearchvalue: '',\n      nextSibling: '',\n      index: -1\n    }\n  }\n  componentDidMount() {\n\n    /* Adding listners for the drop down purpose */\n    document.addEventListener(\"click\", this.clickSomewhere.bind(this));\n    document.addEventListener(\"keydown\", this.onKeyDownToFocusViaSuggestion.bind(this), false);\n  }\n  componentWillUnmount() {\n\n    /* Removing listners for the drop down purpose */\n    document.removeEventListener(\"click\", this.clickSomewhere.bind(this));\n    document.removeEventListener(\"keydown\", this.onKeyDownToFocusViaSuggestion.bind(this));\n  }\n\n  /* Method helps in navigating through the populated list  */\n  onKeyDownToFocusViaSuggestion = (e) => {\n\n    let mainOptionBody = document.getElementById('mainOptionBody');\n    let next;\n    if (typeof mainOptionBody !== undefined) {\n      if (mainOptionBody !== null) {\n        let length = mainOptionBody.getElementsByTagName(`li`).length - 1;\n\n        /* When its ArrowDown pressed */\n        if (e.which === 40) {\n          this.setState({\n            ...this.state,\n            index: this.state.index + 1\n          })\n          if (this.state.nextSibling) {\n            this.state.nextSibling.classList.remove('selectedOption');\n            next = mainOptionBody.getElementsByTagName('li')[this.state.index];\n            if (typeof next !== undefined && this.state.index <= length) {\n              this.setState({\n                ...this.state,\n                nextSibling: next\n              })\n            } else {\n              this.setState({\n                ...this.state,\n                index: 0,\n                nextSibling: mainOptionBody.getElementsByTagName('li')[0]\n              })\n            }\n            this.state.nextSibling.classList.add('selectedOption');\n          } else {\n            this.setState({\n              ...this.state,\n              index: 0,\n              nextSibling: mainOptionBody.getElementsByTagName('li')[0]\n            })\n            this.state.nextSibling.classList.add('selectedOption');\n          }\n          this.state.nextSibling.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });\n\n        }\n\n        /* When arrowUp key is pressed */\n        if (e.which === 38) {\n\n          if (this.state.nextSibling) {\n            this.state.nextSibling.classList.remove('selectedOption');\n            this.setState({\n              ...this.state,\n              index: this.state.index - 1\n            })\n            next = mainOptionBody.getElementsByTagName('li')[this.state.index];\n            if (typeof next !== undefined && this.state.index >= 0) {\n              this.setState({\n                ...this.state,\n                nextSibling: next\n              })\n            } else {\n              this.setState({\n                ...this.state,\n                index: length,\n                nextSibling: mainOptionBody.getElementsByTagName('li')[length]\n              })\n            }\n            this.state.nextSibling.classList.add('selectedOption');\n          } else {\n            this.setState({\n              ...this.state,\n              index: 0,\n              nextSibling: mainOptionBody.getElementsByTagName('li')[length]\n            })\n\n            this.state.nextSibling.classList.add('selectedOption');\n          }\n\n          this.state.nextSibling.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });\n\n        }\n\n        /* When we enter on particular data which when is selected */\n        if (e.which === 13) {\n          this.setState({\n            ...this.state,\n            checkvalue: this.state.nextSibling.dataset.value,\n            suggestion: []\n          })\n        }\n      }\n\n    }\n  }\n\n  /* When click has happened at another place if its not suggestion remove button, we are suppose to hide suggestion */\n  clickSomewhere = (e) => {\n    if (e.path[0].id !== 'hereInput' && e.path[0].className !== 'removeSuggestionBtn') {\n      this.setState({\n        ...this.state,\n        checkvalue: this.state.checkvalue.trim(),\n        selectedArray: [],\n        suggestion: [],\n        index: -1\n      })\n    }\n  }\n\n  /* When we click in input box, and expect suggestion to show up */\n  onfocusDataShouldDisplay = (e) => {\n    if (!this.state.checkvalue.includes('@')) {\n      let words = JSON.parse(window.localStorage.getItem('words')).reverse();\n      if (words) {\n        this.setState({\n          ...this.state,\n          selectedType: '',\n          index: -1,\n          nextSibling: '',\n          suggestion: words.filter(e => e.toLowerCase().includes(this.state.checkvalue)),\n          showingsearchvalue: ''\n        })\n      }\n    }\n  }\n\n  /* Various methods that we expect to see when user starts typing in the input box */\n  openOptionArea = (e) => {\n\n    this.setState({\n      ...this.state,\n      checkvalue: e.target.value,\n      selectedArray: [],\n      showingsearchvalue: '',\n      suggestion: [],\n      selectedType: '',\n      index: -1,\n    })\n\n    let type = \"\", name = \"\";\n    let typelist = [];\n    if (e.target.value.includes('@')) {\n      type = e.target.value.split('@')[1].split(\" \")[0].toLowerCase();\n      name = e.target.value.substr(e.target.value.indexOf(' ') + 1).toLowerCase()\n    } else {\n      name = e.target.value.toLowerCase()\n    }\n\n    /* Fetching our suggestion data */\n    fetch('option.json').then(\n      json => json.json()\n    ).then(response => {\n\n      if (type) {\n        response.forEach(element => {\n          if (element.type.toLowerCase() === type) {\n            this.setState(state => {\n              return {\n                ...this.state,\n                selectedArray: element.name,\n                selectedType: element.type\n              }\n            })\n          }\n        });\n\n        this.setState({\n          ...this.state,\n          suggestion: this.state.selectedArray.filter(e => e.toLowerCase().includes(name))\n        });\n\n      }\n\n      if (this.state.checkvalue.charAt(0) === '@' && !this.state.checkvalue.includes(\" \")) {\n        response.forEach(element => {\n          typelist.push('@' + element.type);\n        });\n        this.setState(state => {\n          return {\n            ...this.state,\n            suggestion: typelist.filter(e => e.toLowerCase().includes(name))\n          }\n        })\n\n      }\n\n\n      if (this.state.checkvalue.charAt(0) !== '@') {\n        this.setState(state => {\n          return {\n            ...this.state,\n            suggestion: JSON.parse(window.localStorage.getItem(\"words\")).filter(e => e.toLowerCase().includes(this.state.checkvalue))\n          }\n        })\n      }\n\n\n    })\n      .catch(err => console.log(\"err\", err));\n\n\n  }\n\n  /* Method that will invoke when search button is clicked, we are saving the data as well */\n  btnSearchClick = (e) => {\n    let words = JSON.parse(window.localStorage.getItem('words'));\n    if (!words) {\n      words = [];\n    }\n    if (!words.includes(this.state.checkvalue)) {\n      if (words.length === 5) {\n        words.shift();\n      }\n      words.push(this.state.checkvalue.trim());\n    }\n    this.setState({\n      ...this.state,\n      checkvalue: '',\n      showingsearchvalue: `Search Happened: ${this.state.checkvalue}`\n    })\n    window.localStorage.setItem('words', JSON.stringify(words));\n  }\n\n\n  /* User gets the allowance to remove suggestion showing of recent search */\n  removeSuggestion = (data, e) => {\n\n    let words = JSON.parse(window.localStorage.getItem('words'));\n    if (words.includes(data)) {\n      words.splice(words.indexOf(data), 1);\n      window.localStorage.setItem(\"words\", JSON.stringify(words));\n    }\n\n    this.setState({\n      ...this.state,\n      suggestion: this.state.suggestion.splice(this.state.suggestion.indexOf(data), 1),\n      checkvalue: ''\n    });\n\n  }\n\n  /* This method will invoke as soon as user clicks on the option displaying */\n  clickOption = (data, e) => {\n    if (e.nativeEvent.path[0].className !== 'removeSuggestionBtn') {\n      this.setState({\n        ...this.state,\n        checkvalue: data\n      })\n    } else {\n      this.setState({\n        ...this.state\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n\n        <div style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\n\n          <div>\n            <div style={{ display: 'flex' }}>\n              <input id=\"hereInput\"\n                onChange={this.openOptionArea.bind(this)}\n                value={this.state.checkvalue}\n                className=\"inputArea\"\n                onFocus={this.onfocusDataShouldDisplay.bind(this)} />\n              <button className=\"btnSearch\" onClick={this.btnSearchClick.bind(this)}>&#8981;</button>\n            </div>\n            {this.state.suggestion.length !== 0 &&\n              <div className=\"mainOptionBody\" id=\"mainOptionBody\">\n                {this.state.suggestion.map((sug, index) => {\n                  return (\n\n                    <li key={index} className=\"optionArea spaceBetweened\"\n                      onClick={this.clickOption.bind(this, sug)}\n                      id={`option${index}`}\n                      data-value={sug}>\n                      <div>\n                        {sug}\n                      </div>\n                      {((this.state.checkvalue !== '@' && this.state.selectedType === '')) &&\n                        <button className=\"removeSuggestionBtn\" onClick={this.removeSuggestion.bind(this, sug)}>x</button>\n                      }\n                    </li>\n\n                  )\n                })}\n              </div>}\n\n\n          </div>\n        </div>\n\n        <div className=\"showAfterSearch\"><b>{this.state.showingsearchvalue}</b></div>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}